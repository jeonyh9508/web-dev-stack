<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sh.haagendazo.mapper.DetailMapper">
<resultMap type="Project" id="projectDetailMap">
    <id property="projectId" column="project_id" />
    <result property="projectCode" column="project_code"/>
    <result property="projectName" column="project_name"/>
    <result property="projectType" column="project_type"/>
    <result property="userId" column="user_id"/>
    <result property="startDate" column="start_date"/>
    <result property="endDate" column="end_date"/>
    <result property="status" column="status"/>
    <result property="description" column="description"/>
    <result property="createdAt" column="p_created_at"/>
    <result property="updatedAt" column="updated_at"/>
    <result property="memberId" column="member_id"/>
    <result property="memberUserId" column="pm_user_id"/>
    <result property="memberRole" column="role"/>
    <result property="memberCreatedAt" column="pm_created_at"/>
    <result property="userUserId" column="u_user_id"/>
    <result property="email" column="email"/>
    <result property="password" column="password"/>
    <result property="name" column="name"/>
    <result property="deptId" column="dept_id"/>
    <result property="gradeId" column="grade_id"/>
    <result property="userCreatedAt" column="u_created_at"/>
    <result property="scheduleId" column="schedule_id"/>
    <result property="title" column="title"/>
    <result property="scheDescription" column="s_description"/>
    <result property="scheUserId" column="s_user_id"/>
    <result property="scheProjectId" column="s_project_id"/>
    <result property="scheStartDatetime" column="s_start_datetime"/>
    <result property="scheEndDatetime" column="s_end_datetime"/>
    <result property="scheCreatedAt" column="s_created_at"/>
</resultMap>

<select id="detail" resultMap="projectDetailMap" parameterType="int">
 SELECT 
        project.project_id,
        project.project_code,
        project.project_name,
        project.project_type,
        project.user_id,
        project.start_date,
        project.end_date,
        project.status,
        project.description,
        project.created_at AS p_created_at,
        project.updated_at,

        project_member.member_id,
        project_member.user_id AS pm_user_id,
        project_member.role,
        project_member.created_at AS pm_created_at,

        user.user_id AS u_user_id,
        user.email,
        user.password,
        user.name,
        user.dept_id,
        user.grade_id,
        user.created_at AS u_created_at
    FROM project
    LEFT JOIN project_member USING (project_id)
    LEFT JOIN user ON project_member.user_id = user.user_id
    WHERE project.project_id = #{projectId}
    LIMIT 1
</select>

<select id="projectMember" resultMap="projectDetailMap" parameterType="int">
	SELECT project_id, project_member.role, name, project_member.member_id, project_member.user_id AS pm_user_id FROM project_member LEFT JOIN user USING (user_id)
	WHERE project_id = #{projectId}
</select>

<select id="userView" resultMap="projectDetailMap">
	SELECT user_id AS u_user_id, name FROM user
</select>

<select id="projectUserList" resultMap="projectDetailMap" parameterType="int">
	SELECT user.user_id AS u_user_id, name FROM user LEFT JOIN project_member USING (user_id) WHERE project_id = #{projectId}  
</select>

<delete id="projectDelete" parameterType="int">
	DELETE FROM project WHERE project_id = #{projectId} 
</delete>

<update id="projectUpdate" parameterType="Project">
	UPDATE project SET status = #{status}, user_id = #{userId},start_date=#{startDate, jdbcType=DATE}, end_date = #{endDate, jdbcType=DATE}, updated_at = NOW() 
	WHERE project_id = #{projectId}
	AND #{endDate} >= #{startDate}
</update>

<update id="pmUpdate" parameterType="Project">
	UPDATE project SET user_id = #{userId} WHERE project_id = #{projectId}
</update>

<insert id="memberInsert" parameterType="Project">
	INSERT INTO project_member(project_id, user_id, role)
	VALUES (#{projectId}, #{memberUserId}, #{memberRole})
</insert>

<delete id="memberDelete" parameterType="ArrayList">
	DELETE FROM project_member WHERE member_id IN 
	<foreach collection="idList" item="memberId" open="(" close=")" separator=",">
		#{memberId}
	</foreach>
</delete>


<select id="memberSchedule" resultMap="projectDetailMap" parameterType="int">
SELECT 
    project.project_id AS project_id,
    
    user.user_id AS u_user_id,
    user.name,
    
    schedule.schedule_id,
    title,
    schedule.description AS s_description, 
    schedule.user_id AS s_user_id,
    schedule.project_id AS s_project_id,
    schedule.start_datetime AS s_start_datetime,
    schedule.end_datetime AS s_end_datetime
    
FROM project
JOIN project_member ON project.project_id = project_member.project_id
JOIN user ON project_member.user_id = user.user_id
JOIN schedule ON project.project_id = schedule.project_id
              AND user.user_id = schedule.user_id
WHERE project.project_id = #{projectId}
</select> 
<update id="memberClean" parameterType="int">
UPDATE project 
SET user_id = null
WHERE project_id = #{projectId}
</update>
</mapper>
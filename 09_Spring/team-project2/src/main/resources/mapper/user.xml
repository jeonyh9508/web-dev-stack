<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sh.haagendazo.mapper.UserMapper">
	
	<resultMap id="UserMap" type="User">
	<id property="userId" column="user_id"/>
    <result property="email" column="email"/>
    <result property="password" column="password"/>
    <result property="pwd" column="pwd"/>
    <result property="name" column="name"/>
    <result property="createdAt" column="created_at"/>
    
    <result property="gradeId" column="grade_id"/>
    <result property="gradeName" column="grade_name"/>  
    <result property="role" column="role"/>

    <result property="deptId" column="dept_id"/>
    <result property="deptName" column="dept_name"/>
    
    </resultMap>
    
	<insert id="register" parameterType="User">
		INSERT INTO user(email, password, name, grade_id, dept_id) VALUES(#{email}, #{password}, #{name}, #{gradeId}, #{deptId})
	</insert>
	
	<select id="login" parameterType="User" resultType="User">
		SELECT * FROM user WHERE email= #{email}
	</select>
	
	<select id="selectAll" parameterType="Paging" resultMap="UserMap">
		SELECT * FROM user LEFT JOIN grade USING (grade_id) LEFT JOIN department USING (dept_id)
		<where>
		<if test="search != null">
			<choose>
			<when test="select == 'name'">
			name LIKE CONCAT ('%', #{search}, '%')
			</when>
			<when test="select == 'email'">
			email LIKE CONCAT ('%', #{search}, '%')
			</when>
			<when test="select == 'gradeName'">
			grade_name LIKE CONCAT ('%', #{search}, '%')
			</when>
			<when test="select == 'deptName'">
			dept_name LIKE CONCAT ('%', #{search}, '%')
			</when>
			</choose>
		</if>
	    </where>
	    <choose>
	 <when test="orderBy == 'name'">
        ORDER BY name
        <if test="orderDirection != null">
            ${orderDirection}
        </if>
        <if test="orderDirection == null">
            ASC
        </if>
    </when>	    
    <when test="orderBy == 'createdAt'">
        ORDER BY created_at
        <if test="orderDirection != null">
            ${orderDirection}
        </if>
        <if test="orderDirection == null">
            ASC
        </if>
    </when>
    <when test="orderBy == 'deptId'">
        ORDER BY dept_id
        <if test="orderDirection != null">
            ${orderDirection}
        </if>
        <if test="orderDirection == null">
            ASC
        </if>
    </when>
    <when test="orderBy == 'gradeId'">
        ORDER BY grade_id
        <if test="orderDirection != null">
            ${orderDirection}
        </if>
        <if test="orderDirection == null">
            ASC
        </if>
    </when>
    <otherwise>
        ORDER BY user_id ASC
    </otherwise>
	</choose>
		LIMIT #{offset}, #{limit}
	</select>
	
	<update id="updateUser" parameterType="User">
		UPDATE user SET email= #{email}, password= #{password}, dept_id= #{deptId}, grade_id= #{gradeId} WHERE user_id = #{userId}
	</update>
	
 	<delete id="deleteUser" parameterType="User">
		DELETE FROM user WHERE user_id = #{userId}
	</delete>
	
	<select id="total" parameterType="Paging" resultType="int">
    SELECT count(user_id) FROM user LEFT JOIN grade USING (grade_id) LEFT JOIN department USING (dept_id)
    <where>
    	<if test="search != null and search != ''">
    	<choose>
            <when test="select == 'name'">
            name LIKE CONCAT ('%', #{search}, '%')
            </when>
            <when test="select == 'email'">
            email LIKE CONCAT ('%', #{search}, '%')
            </when>
            <when test="select == 'gradeName'">
            grade_name LIKE CONCAT ('%', #{search}, '%')
            </when>
            <when test="select == 'deptName'">
            dept_name LIKE CONCAT ('%', #{search}, '%')
            </when>
        </choose>
    	</if>
    </where>
	</select>
	
	<select id="userGrade" resultMap="UserMap">
		SELECT grade_id, grade_name FROM grade
	</select>
	
	<select id="userDept" resultMap="UserMap">
		SELECT dept_id, dept_name FROM department
	</select>
	
	<select id="showCsdept" resultMap="UserMap">
		SELECT user_id, name FROM user LEFT JOIN grade USING (grade_id) LEFT JOIN department USING (dept_id) WHERE dept_id = 15
	</select>

	<select id="showManager" resultMap="UserMap">
		SELECT user_id, name FROM user LEFT JOIN grade USING (grade_id) LEFT JOIN department USING (dept_id) WHERE grade_id >= 3
	</select>
	
	<select id="count" parameterType="String" resultType="int">
	SELECT count(user_id) FROM user LEFT JOIN grade USING (grade_id) LEFT JOIN department USING (dept_id)
	<where>
	role = #{role}
	</where>
	</select>
	
</mapper>